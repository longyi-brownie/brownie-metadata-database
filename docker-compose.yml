version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: brownie-metadata-postgres
    environment:
      POSTGRES_DB: brownie_metadata
      POSTGRES_USER: brownie
      POSTGRES_PASSWORD: brownie
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brownie -d brownie_metadata"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brownie-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: brownie-metadata-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - brownie-network

  # Database Migration Service
  migrate:
    build: .
    container_name: brownie-metadata-migrate
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: brownie_metadata
      DB_USER: brownie
      DB_PASSWORD: brownie
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "-m", "alembic", "upgrade", "head"]
    networks:
      - brownie-network

  # Main Application
  app:
    build: .
    container_name: brownie-metadata-app
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: brownie_metadata
      DB_USER: brownie
      DB_PASSWORD: brownie
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      METRICS_ENABLED: "true"
      METRICS_PORT: 8001
    ports:
      - "8000:8000"
      - "8001:8001"  # Metrics port
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - brownie-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: brownie-metadata-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - brownie-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: brownie-metadata-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - brownie-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  brownie-network:
    driver: bridge

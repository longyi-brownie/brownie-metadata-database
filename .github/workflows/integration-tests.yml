name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Fast checks for every commit
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install black isort flake8 mypy
    
    - name: Run Black (code formatting)
      run: black --check --diff .
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff .
    
    - name: Run flake8 (linting)
      run: flake8 .
    
    - name: Run mypy (type checking)
      run: mypy src/ --ignore-missing-imports

  # Integration tests (runs on main/PRs)
  integration-tests:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov testcontainers
    
    - name: Run database schema tests
      run: |
        pytest tests/test_integration.py::TestDatabaseSchema -v --tb=short
    
    - name: Run migration compatibility tests
      run: |
        pytest tests/test_integration.py::TestMigrationCompatibility -v --tb=short
    
    - name: Run all tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Comprehensive Docker stack integration test
  docker-integration:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest requests
    
    - name: Generate SSL certificates
      run: |
        chmod +x scripts/setup-dev-certs.sh
        ./scripts/setup-dev-certs.sh
    
    - name: Run comprehensive Docker integration tests
      run: |
        pytest tests/test_docker_integration.py::TestDockerStackIntegration -v --tb=short

  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build database migration image
      run: |
        docker build -t brownie-metadata-db:test .
    
    - name: Build metrics sidecar image
      run: |
        docker build -f Dockerfile.metrics -t brownie-metadata-metrics:test .
    
    - name: Test Docker Compose stack
      run: |
        docker compose up -d
        sleep 30
        docker compose ps
        docker compose logs migrate
        docker compose down
    
    - name: Run comprehensive Docker integration tests
      run: |
        # Install additional test dependencies
        pip install requests
        
        # Run the comprehensive integration test
        pytest tests/test_docker_integration.py::TestDockerStackIntegration -v --tb=short

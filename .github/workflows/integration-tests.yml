name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Fast checks for every commit
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install black isort flake8 mypy
    
    - name: Run Black (code formatting)
      run: black --check --diff .
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff .
    
    - name: Run flake8 (linting)
      run: flake8 .
    
    - name: Run mypy (type checking)
      run: mypy src/ --ignore-missing-imports

  # Comprehensive integration tests (Docker + Unit + Integration)
  full-integration:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov requests
    
    - name: Generate SSL certificates
      run: |
        chmod +x scripts/setup-dev-certs.sh
        ./scripts/setup-dev-certs.sh
        echo "=== Fix certificate ownership for PostgreSQL ==="
        # PostgreSQL needs the key files to be owned by postgres user (999) or root (0)
        sudo chown -R 999:999 dev-certs/ || echo "Could not change ownership, trying alternative..."
        # Alternative: make files readable by postgres user
        chmod 644 dev-certs/*.crt dev-certs/*.key || echo "Could not change permissions"
        ls -la dev-certs/
    
    - name: Build Docker images
      run: |
        echo "=== Building database migration image ==="
        docker build -f Dockerfile -t brownie-metadata-migrate:test . --progress=plain
        echo "=== Migration image built successfully ==="
        
        echo "=== Building metrics sidecar image ==="
        docker build -f Dockerfile.metrics -t brownie-metadata-metrics:test . --progress=plain
        echo "=== Metrics image built successfully ==="
    
    - name: Start Docker Compose stack
      run: |
          echo "=== Pre-startup debugging ==="
          echo "Current directory: $(pwd)"
          echo "Docker version:"
          docker --version
          echo "Docker Compose version:"
          docker compose version
          echo "Certificate files:"
          ls -la dev-certs/
          echo "Certificate file permissions:"
          stat dev-certs/* || echo "No certificate files found"
          echo "Docker Compose config validation:"
          docker compose config
          
          echo "=== Testing PostgreSQL only first ==="
          docker compose up -d postgres || {
            echo "=== PostgreSQL startup FAILED ==="
            echo "=== Exit code: $? ==="
            echo "=== Checking what containers exist ==="
            docker ps -a
            echo "=== Checking PostgreSQL logs ==="
            docker compose logs postgres
            echo "=== Checking PostgreSQL container details ==="
            docker inspect brownie-metadata-postgres
            exit 1
          }
          echo "=== PostgreSQL started successfully ==="
          
          echo "=== Checking PostgreSQL health ==="
          docker compose exec -T postgres pg_isready -U brownie-fastapi-server -d brownie_metadata || echo "PostgreSQL health check failed"
          
          echo "=== Starting all containers ==="
          docker compose up -d 2>&1 || {
            echo "=== Docker compose up FAILED ==="
            echo "=== Exit code: $? ==="
            echo "=== Checking what containers exist ==="
            docker ps -a
            echo "=== Checking docker compose logs ==="
            docker compose logs
            echo "=== Checking individual container logs ==="
            docker compose logs postgres
            docker compose logs redis
            docker compose logs backup
            docker compose logs migrate
            docker compose logs metrics-sidecar
            docker compose logs prometheus
            docker compose logs grafana
            echo "=== Checking container status ==="
            docker compose ps -a
            echo "=== Checking which containers failed ==="
            docker compose ps --filter "status=exited"
            exit 1
          }
          echo "=== Docker compose up exit code: $? ==="
          
          echo "=== Container status after 30s ==="
          sleep 30
          docker compose ps
          
          echo "=== All services logs ==="
          docker compose logs
          
          echo "=== Testing service endpoints ==="
          echo "=== Testing PostgreSQL connection ==="
          docker compose exec -T postgres psql -U brownie-fastapi-server -d brownie_metadata -c "SELECT version();" || echo "PostgreSQL connection test failed"
          
          echo "=== Testing Redis connection ==="
          docker compose exec -T redis redis-cli ping || echo "Redis connection test failed"
          
          echo "=== Testing Prometheus endpoint ==="
          curl -f http://localhost:9090/api/v1/targets || echo "Prometheus endpoint test failed"
          
          echo "=== Testing Grafana endpoint ==="
          curl -f http://localhost:3000/api/health || echo "Grafana endpoint test failed"
          
          echo "=== Testing metrics sidecar endpoint ==="
          curl -f http://localhost:9091/metrics || echo "Metrics sidecar endpoint test failed"
          
          echo "=== Docker Compose stack started successfully ==="
    
    - name: Run all tests with coverage
      run: |
        echo "=== Running unit tests ==="
        pytest tests/test_models.py tests/test_logging.py tests/test_connection.py tests/test_ssl_connection.py tests/test_metrics_sidecar.py tests/test_migration.py tests/test_migration_independent.py -v --tb=short --disable-warnings
        
        echo "=== Running integration tests ==="
        pytest tests/test_integration.py -v --tb=short --disable-warnings
        
        echo "=== Running Docker integration tests ==="
        pytest tests/test_docker_integration.py::TestDockerStackIntegration -v --tb=short --disable-warnings
        
        echo "=== Running all tests with coverage ==="
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --disable-warnings
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-integration
        fail_ci_if_error: false